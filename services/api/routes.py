# Auto-generated by Lumenary
##############################################################################
# Dependencies
##############################################################################


from fastapi import Depends, FastAPI, HTTPException, Request, status, Body, UploadFile, File, Form
from fastapi.staticfiles import StaticFiles
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import HTMLResponse, Response

from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse, HTMLResponse, Response
from fastapi.exceptions import RequestValidationError
from fastapi.security import OAuth2PasswordBearer

import sys
import os
import asyncio
import logging
import traceback
import contextvars
import httpx
import jwt
import json
import requests
from pathlib import Path
import builtins

from datetime import datetime, date, time, timedelta
from concurrent.futures import ThreadPoolExecutor
from typing import Callable, Any, TypeVar, Awaitable, List, Optional, Dict, Union, Literal, Annotated, Tuple, Set
from functools import partial, wraps
from uuid import UUID
import uuid

from solar.access import User
from solar.media import MediaFile

from api.utils import get_swagger_ui_html
from api.models import TokenExchangeRequest, TokenResponse, TokenValidationRequest, LogoutResponse

OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
ROUTER_BASE_URL = os.environ.get("ROUTER_BASE_URL")
SOLAR_APP_TOKEN_URL = f"{ROUTER_BASE_URL}/innerApp/oauth2/token"
SOLAR_APP_INTROSPECT_URL = f"{ROUTER_BASE_URL}/innerApp/oauth2/introspect"
REFRESH_TOKEN_COOKIE_NAME = "refresh_token"





from .models import StartChatSessionOutputSchema, BodyConversationEngineSendChatMessage, SendChatMessageOutputSchema, BodyConversationEngineGetChatHistory, GetChatHistoryOutputSchema, BodyProposalGeneratorGenerateProposal, GenerateProposalOutputSchema, BodyProposalGeneratorGetProposalDetails, GetProposalDetailsOutputSchema, BodyGoogleDriveServiceUploadProposalToDrive, UploadProposalToDriveOutputSchema, TestGoogleDriveConnectionOutputSchema, BodyCalendarServiceGetCalendarBookingLink, GetCalendarBookingLinkOutputSchema, BodyCalendarServiceMarkCalendarBookingCompleted, MarkCalendarBookingCompletedOutputSchema
from core import conversation_engine, proposal_generator, google_drive_service, calendar_service


###############################################################################
# Logging Setup
###############################################################################
import sys
from loguru import logger
from pathlib import Path
from typing import TypeVar
import traceback

def format_record(record):
    fmt = "{level:<5} | {message}"
    if record["exception"] is not None:
        exc_type, exc_value, exc_traceback = record["exception"]        
        tb_lines = traceback.extract_tb(exc_traceback)
        if tb_lines:
            last_frame = tb_lines[-1]
            error_info = (
                f'\nFile "{last_frame.filename}", line {last_frame.lineno}, in {last_frame.name}\n'
                f'  {last_frame.line}\n'
                f'{exc_type.__name__}: {exc_value}'
            )
            record["message"] += error_info
        
        record["exception"] = None
    
    return fmt + "\n"

logger.remove()
logger.add(
    sys.stderr,
    level="DEBUG",
    format=format_record,
    colorize=True
)

Path("../logs").mkdir(exist_ok=True)
logger.add(
    "../logs/fast_api.log",
    rotation="50 MB",
    retention="10 days",
    level="DEBUG",
    format=format_record
)

# need this to capture print statements
class InterceptHandler:
    def write(self, msg):
        if msg.strip():
            logger.info(msg.strip())
    
    def flush(self):
        pass

sys.stdout = InterceptHandler()

T = TypeVar('T')



##############################################################################
# General App
##############################################################################

app = FastAPI(
    title="New app â€” 6/18 @ 11:03 PM",
    docs_url=None
)

###############################################################################
# Simple Request Logging Middleware
###############################################################################

@app.middleware("http")
async def log_requests(request: Request, call_next):
    request_id = str(uuid.uuid4())[:8]
    
    with logger.contextualize(request_id=request_id):
        start_time = datetime.utcnow()
        
        try:
            response = await call_next(request)
            process_time = (datetime.utcnow() - start_time).total_seconds()
            if "HEAD /docs" not in request.url.path:
              logger.info(f"{request.method} {request.url.path} ({response.status_code}) - {process_time:.3f}s")
            return response
        except Exception as e:
            process_time = (datetime.utcnow() - start_time).total_seconds()
            logger.exception(f"{request.method} {request.url.path} - Failed after {process_time:.3f}s")
            raise
            
###############################################################################
# Error Handler
###############################################################################
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Global exception handler for unhandled errors"""
    logger.error(f"Unhandled exception on {request.method} {request.url.path}: {exc}", exc_info=True)
    
    # In production, don't expose error details
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": "Internal Server Error",
            "message": "An unexpected error occurred"
        }
    )
    
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """Handle pydantic validation errors"""
    logger.error(f"Validation error on {request.url.path}: {exc.errors()}")
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": "Validation Error",
            "message": "Invalid request parameters",
            "details": exc.errors()
        }
    )
    
@app.exception_handler(Exception)
async def handle_errors(request: Request, exc: Exception):
    logger.exception(f"Unhandled error: {type(exc).__name__}: {exc}")
    return JSONResponse(
        status_code=500,
        content={"error": "Internal server error", "message": str(exc)}
    )

@app.exception_handler(RequestValidationError)
async def handle_validation_errors(request: Request, exc: RequestValidationError):
    logger.warning(f"Validation error: {exc.errors()}")
    return JSONResponse(
        status_code=422,
        content={"error": "Validation failed", "details": exc.errors()}
    )

# We need to put a token endpoint here, but we're injecting the token,
# so we'll just put a mock endpoint here.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="api/mockedTokenEndpoint/")
ENV = os.environ.get("ENV", "deployment")

def get_auth_origins():
    if ENV == "sandbox":
        origins = [
            os.environ.get("SANDBOX_FRONTEND_URL", ""),
            os.environ.get("SANDBOX_BACKEND_URL", ""),
        ]
    else:
        origins = [os.environ.get("PUBLIC_DOMAIN", "")]
    
    return [origin for origin in origins if origin]

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

async def auth_cors_middleware(request: Request, call_next):
    if request.url.path.startswith("/api/auth"):
        auth_origins = get_auth_origins()
        origin = request.headers.get("origin", "")
        response = await call_next(request)
        
        # override the wildcard CORS settings with strict origin checking
        if origin in auth_origins:
            response.headers["Access-Control-Allow-Origin"] = origin
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Allow-Methods"] = "GET, POST, OPTIONS"
            response.headers["Access-Control-Allow-Headers"] = "Authorization, Content-Type, Accept"
            response.headers["Access-Control-Expose-Headers"] = "Set-Cookie"
        else:
            # unauthorized origins on auth routes, set CORS headers to blank or remove them
            response.headers["Access-Control-Allow-Origin"] = ""
            response.headers["Access-Control-Allow-Methods"] = ""
            response.headers["Access-Control-Allow-Headers"] = ""
            
        return response
    else:
        return await call_next(request)

# auth-specific middleware and logging middleware
app.middleware("http")(auth_cors_middleware)

# OPTIONS handler for auth endpoints
@app.options("/api/auth/{rest_of_path:path}", include_in_schema=False)
async def auth_options_handler(request: Request):
    auth_origins = get_auth_origins()
    origin = request.headers.get("origin", "")
    response = Response()
    
    if origin in auth_origins:
        response.headers["Access-Control-Allow-Origin"] = origin
        response.headers["Access-Control-Allow-Credentials"] = "true"
        response.headers["Access-Control-Allow-Methods"] = "GET, POST, OPTIONS"
        response.headers["Access-Control-Allow-Headers"] = "Authorization, Content-Type, Accept"
        response.headers["Access-Control-Max-Age"] = "3600"
    
    return response

@app.head("/docs", include_in_schema=False)
async def health_check():
    return {"status": "healthy"}
    
##############################################################################
# Synchronous Function Helpers
##############################################################################

thread_pool = ThreadPoolExecutor(max_workers=4)

async def run_sync_in_thread(func: Callable[..., Any], *args, **kwargs) -> Any:
    """Runs a synchronous function in a thread pool"""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(
        thread_pool,
        partial(func, *args, **kwargs)
    )


##############################################################################
# Custom Docs
##############################################################################

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " on Solar",
        swagger_ui_parameters={
            "persistAuthorization": False,
            "syntaxHighlight": {"theme": "obsidian"},
        }
    )

##############################################################################
# Auth Routes
##############################################################################

async def get_current_user(token: str = Depends(oauth2_scheme)):
    try:
        base_url = os.getenv("ROUTER_BASE_URL")
        if not base_url:
            raise HTTPException(status_code=500, detail="ROUTER_BASE_URL is not set, could not authenticate user")
        
        try:
            decoded_token = jwt.decode(token, options={"verify_signature": False})
            
            jti = decoded_token.get("jti")
            if not jti:
                raise HTTPException(status_code=401, detail="Invalid token format")
            
            exp = decoded_token.get("exp")
            if exp is not None and exp < datetime.utcnow().timestamp():
                raise HTTPException(status_code=401, detail="Token expired")
        
        except jwt.DecodeError:
            raise HTTPException(status_code=401, detail="Malformed token")
        
        token_url = f"{base_url}/innerApp/oauth2/introspect"
        async with httpx.AsyncClient(timeout=20.0) as client:
            response = await client.post(token_url, json={"token": jti, "token_type_hint": "access_token"})
            if response.status_code != 200:
                raise HTTPException(status_code=401, detail="Unauthorized")
            
            json_response = response.json()
            if not json_response.get("active", False):
                raise HTTPException(status_code=401, detail="Unauthorized")
            
            user_uuid = json_response.get("userUuid")
            email = json_response.get("email")
            if not user_uuid or not email:
                raise HTTPException(status_code=401, detail="Invalid user data")
            
            user = User(id=user_uuid, email=email)
            return user
    except HTTPException:
        raise
    except Exception as e:
        print(f"get_current_user failed with error: {type(e).__name__}")
        raise HTTPException(status_code=401, detail="Unauthorized")

##############################################################################
# Normal Routes
##############################################################################

@app.post('/api/conversation_engine/start_chat_session', response_model=StartChatSessionOutputSchema, operation_id='conversation_engine_start_chat_session')
async def conversation_engine_start_chat_session() -> StartChatSessionOutputSchema:
    """
    Start a new chat session.
    """
    response = await run_sync_in_thread(conversation_engine.start_chat_session)
    return response

@app.post('/api/conversation_engine/send_chat_message', response_model=SendChatMessageOutputSchema, operation_id='conversation_engine_send_chat_message')
async def conversation_engine_send_chat_message(body: BodyConversationEngineSendChatMessage = Body(...)) -> SendChatMessageOutputSchema:
    """
    Process a user message and return the agent's response.
    """
    response = await run_sync_in_thread(conversation_engine.send_chat_message, session_id=body.session_id, user_message=body.user_message)
    return response

@app.post('/api/conversation_engine/get_chat_history', response_model=GetChatHistoryOutputSchema, operation_id='conversation_engine_get_chat_history')
async def conversation_engine_get_chat_history(body: BodyConversationEngineGetChatHistory = Body(...)) -> GetChatHistoryOutputSchema:
    """
    Get the chat history for a session.
    """
    response = await run_sync_in_thread(conversation_engine.get_chat_history, session_id=body.session_id)
    return response

@app.post('/api/proposal_generator/generate_proposal', response_model=GenerateProposalOutputSchema, operation_id='proposal_generator_generate_proposal')
async def proposal_generator_generate_proposal(body: BodyProposalGeneratorGenerateProposal = Body(...)) -> GenerateProposalOutputSchema:
    """
    Generate a complete business proposal based on the conversation.
    """
    response = await run_sync_in_thread(proposal_generator.generate_proposal, session_id=body.session_id)
    return response

@app.post('/api/proposal_generator/get_proposal_details', response_model=GetProposalDetailsOutputSchema, operation_id='proposal_generator_get_proposal_details')
async def proposal_generator_get_proposal_details(body: BodyProposalGeneratorGetProposalDetails = Body(...)) -> GetProposalDetailsOutputSchema:
    """
    Get full proposal details by ID.
    """
    response = await run_sync_in_thread(proposal_generator.get_proposal_details, proposal_id=body.proposal_id)
    return response

@app.post('/api/google_drive_service/upload_proposal_to_drive', response_model=UploadProposalToDriveOutputSchema, operation_id='google_drive_service_upload_proposal_to_drive')
async def google_drive_service_upload_proposal_to_drive(body: BodyGoogleDriveServiceUploadProposalToDrive = Body(...)) -> UploadProposalToDriveOutputSchema:
    """
    Public endpoint to upload a proposal to Google Drive.
    """
    response = await run_sync_in_thread(google_drive_service.upload_proposal_to_drive, proposal_id=body.proposal_id)
    return response

@app.post('/api/google_drive_service/test_google_drive_connection', response_model=TestGoogleDriveConnectionOutputSchema, operation_id='google_drive_service_test_google_drive_connection')
async def google_drive_service_test_google_drive_connection() -> TestGoogleDriveConnectionOutputSchema:
    """
    Test Google Drive service connection.
    """
    response = await run_sync_in_thread(google_drive_service.test_google_drive_connection)
    return response

@app.post('/api/calendar_service/get_calendar_booking_link', response_model=GetCalendarBookingLinkOutputSchema, operation_id='calendar_service_get_calendar_booking_link')
async def calendar_service_get_calendar_booking_link(body: BodyCalendarServiceGetCalendarBookingLink = Body(...)) -> GetCalendarBookingLinkOutputSchema:
    """
    Get a calendar booking link for scheduling a strategy call.
    """
    response = await run_sync_in_thread(calendar_service.get_calendar_booking_link, business_name=body.business_name, proposal_id=body.proposal_id)
    return response

@app.post('/api/calendar_service/mark_calendar_booking_completed', response_model=MarkCalendarBookingCompletedOutputSchema, operation_id='calendar_service_mark_calendar_booking_completed')
async def calendar_service_mark_calendar_booking_completed(body: BodyCalendarServiceMarkCalendarBookingCompleted = Body(...)) -> MarkCalendarBookingCompletedOutputSchema:
    """
    Mark that a user has completed calendar booking.
    """
    response = await run_sync_in_thread(calendar_service.mark_calendar_booking_completed, session_id=body.session_id)
    return response
